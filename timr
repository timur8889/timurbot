import os
import logging
from datetime import datetime, timedelta
import sqlite3
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openpyxl
from openpyxl import Workbook
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_NAME = 'filters.db'
EXCEL_FILE = 'filters_data.xlsx'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            filter_name TEXT NOT NULL,
            installation_date TEXT NOT NULL,
            replacement_date TEXT NOT NULL,
            notification_sent INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
def init_excel():
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.title = "–§–∏–ª—å—Ç—Ä—ã"
        ws.append(['ID', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞', '–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ç–∞—Ç—É—Å'])
        wb.save(EXCEL_FILE)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        ['üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel'],
        ['üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def confirmation_keyboard(filter_id):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{filter_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, filter_name, installation_date, replacement_date 
        FROM filters WHERE user_id = ?
    ''', (user_id,))
    
    filters = cursor.fetchall()
    conn.close()
    
    if not filters:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return
    
    message = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for filter_item in filters:
        filter_id, name, install_date, replace_date = filter_item
        days_left = (datetime.strptime(replace_date, '%Y-%m-%d') - datetime.now()).days
        status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω" if days_left < 0 else f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
        
        message += (
            f"üîπ {name}\n"
            f"   üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {install_date}\n"
            f"   ‚è∞ –ó–∞–º–µ–Ω–∞: {replace_date}\n"
            f"   {status}\n\n"
        )
    
    await update.message.reply_text(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
async def add_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞, –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î), —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§–∏–ª—å—Ç—Ä –¥–ª—è –≤–æ–¥—ã, 2024-01-15, 180"
    )
    context.user_data['awaiting_filter_data'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞
async def handle_filter_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_filter_data'):
        return
    
    try:
        user_input = update.message.text
        parts = [part.strip() for part in user_input.split(',')]
        
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        filter_name, install_date_str, lifespan_str = parts
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_date = datetime.strptime(install_date_str, '%Y-%m-%d')
        lifespan = int(lifespan_str)
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
        replacement_date = install_date + timedelta(days=lifespan)
        replacement_date_str = replacement_date.strftime('%Y-%m-%d')
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = update.message.from_user.id
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO filters (user_id, filter_name, installation_date, replacement_date)
            VALUES (?, ?, ?, ?)
        ''', (user_id, filter_name, install_date_str, replacement_date_str))
        
        filter_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        update_excel_file()
        
        await update.message.reply_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {replacement_date_str}\n"
            f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 2 –¥–Ω—è –¥–æ –∑–∞–º–µ–Ω—ã."
        )
        
        context.user_data['awaiting_filter_data'] = False
        
    except ValueError as e:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ, –ì–ì–ì–ì-–ú–ú-–î–î, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π\n\n"
            "–ü—Ä–∏–º–µ—Ä: –§–∏–ª—å—Ç—Ä –¥–ª—è –≤–æ–¥—ã, 2024-01-15, 180"
        )
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
async def delete_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, filter_name FROM filters WHERE user_id = ?
    ''', (user_id,))
    
    filters = cursor.fetchall()
    conn.close()
    
    if not filters:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = []
    for filter_item in filters:
        filter_id, name = filter_item
        keyboard.append([InlineKeyboardButton(name, callback_data=f"select_delete_{filter_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith('select_delete_'):
        filter_id = data.split('_')[2]
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT filter_name FROM filters WHERE id = ?', (filter_id,))
        filter_name = cursor.fetchone()[0]
        conn.close()
        
        await query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä '{filter_name}'?",
            reply_markup=confirmation_keyboard(filter_id)
        )
    
    elif data.startswith('confirm_delete_'):
        filter_id = data.split('_')[2]
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM filters WHERE id = ?', (filter_id,))
        conn.commit()
        conn.close()
        
        update_excel_file()
        
        await query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    
    elif data == 'cancel_delete':
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
def update_excel_file():
    conn = sqlite3.connect(DATABASE_NAME)
    df = pd.read_sql_query('''
        SELECT id, user_id, filter_name, installation_date, replacement_date 
        FROM filters
    ''', conn)
    conn.close()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    df['–°—Ç–∞—Ç—É—Å'] = df['replacement_date'].apply(
        lambda x: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω' if datetime.strptime(x, '%Y-%m-%d') < datetime.now() 
        else f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {(datetime.strptime(x, '%Y-%m-%d') - datetime.now()).days}"
    )
    
    with pd.ExcelWriter(EXCEL_FILE, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–§–∏–ª—å—Ç—Ä—ã', index=False)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets['–§–∏–ª—å—Ç—Ä—ã']
        
        # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            worksheet.column_dimensions[column_letter].width = adjusted_width

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        update_excel_file()
        
        with open(EXCEL_FILE, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename='filters_data.xlsx',
                caption='üìä –î–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö'
            )
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel.")

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
async def sync_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT filter_name, replacement_date FROM filters WHERE user_id = ?
    ''', (user_id,))
    
    filters = cursor.fetchall()
    conn.close()
    
    if not filters:
        await update.message.reply_text("–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º.")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    ical_content = "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//Filter Bot//EN\n"
    
    for filter_name, replacement_date in filters:
        event_date = datetime.strptime(replacement_date, '%Y-%m-%d')
        notification_date = event_date - timedelta(days=2)
        
        ical_content += f"""BEGIN:VEVENT
SUMMARY:–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}
DTSTART;VALUE=DATE:{event_date.strftime('%Y%m%d')}
DTEND;VALUE=DATE:{(event_date + timedelta(days=1)).strftime('%Y%m%d')}
DESCRIPTION:–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä {filter_name}
BEGIN:VALARM
ACTION:DISPLAY
DESCRIPTION:–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
TRIGGER;RELATED=START:-P2D
END:VALARM
END:VEVENT
"""
    
    ical_content += "END:VCALENDAR"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with open('filters_calendar.ics', 'w', encoding='utf-8') as f:
        f.write(ical_content)
    
    with open('filters_calendar.ics', 'rb') as f:
        await update.message.reply_document(
            document=f,
            filename='filters_calendar.ics',
            caption='üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 –¥–Ω—è –¥–æ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤.'
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_notifications(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–ª—å—Ç—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ –∑–∞–º–µ–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
    two_days_later = (datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT user_id, filter_name, replacement_date 
        FROM filters 
        WHERE replacement_date = ? AND notification_sent = 0
    ''', (two_days_later,))
    
    filters_to_notify = cursor.fetchall()
    
    for user_id, filter_name, replacement_date in filters_to_notify:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                     f"–§–∏–ª—å—Ç—Ä '{filter_name}' —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ 2 –¥–Ω—è ({replacement_date})!"
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            cursor.execute('''
                UPDATE filters SET notification_sent = 1 
                WHERE user_id = ? AND filter_name = ? AND replacement_date = ?
            ''', (user_id, filter_name, replacement_date))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤':
        await show_filters(update, context)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä':
        await add_filter(update, context)
    elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä':
        await delete_filter(update, context)
    elif text == 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel':
        await export_to_excel(update, context)
    elif text == 'üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º':
        await sync_calendar(update, context)
    else:
        await handle_filter_input(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    init_excel()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
    job_queue = application.job_queue
    job_queue.run_repeating(check_notifications, interval=21600, first=10)  # 6 —á–∞—Å–æ–≤ = 21600 —Å–µ–∫—É–Ω–¥
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == '__main__':
    main()
